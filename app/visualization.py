import plotly.express as px
import plotly.graph_objects as go
import streamlit as st

def plot_temperature(data):
    """Genera un gr√°fico de temperatura m√°xima, m√≠nima y actual por fecha y hora."""
    # Crear un gr√°fico de l√≠neas para las temperaturas
    fig = px.line(data, 
                  x='fecha_hora', 
                  y=['temperature_value', 'temperature_max', 'temperature_min'],
                  #title='Temperaturas por Fecha y Hora',
                  labels={'value': 'Temperatura (¬∞C)', 'variable': 'Temp.'},
                  markers=True)

    # Cambiar las etiquetas de los tipos de temperatura
    fig.for_each_trace(lambda t: t.update(name=t.name.replace('temperature_value', 'Actual')
                                            .replace('temperature_max', 'M√°xima')
                                            .replace('temperature_min', 'M√≠nima')))
    
    fig.update_layout(yaxis_title='Temperatura (¬∞C)', xaxis_title='Fecha y Hora')
    st.plotly_chart(fig)  # Mostrar el gr√°fico en la aplicaci√≥n Streamlit

def plot_rain_chance(data):
    """Genera un gr√°fico de probabilidad de precipitaci√≥n por fecha y hora con anotaciones de emoticonos."""
    # Crear el gr√°fico principal de l√≠neas para la probabilidad de precipitaci√≥n
    fig = px.line(data,
                  x='fecha_hora',
                  y='precipitation_value',
                  labels={'precipitation_value': 'Probabilidad (%)'},
                  markers=True)

    # Definir los niveles de probabilidad con emoticonos correspondientes
    emoji_levels = {
        0: "‚òÄÔ∏è",  # Soleado, sin lluvia
        20: "üå§Ô∏è",  # Baja probabilidad de lluvia
        40: "üå¶Ô∏è",  # Probabilidad moderada de lluvia
        60: "üåßÔ∏è",  # Alta probabilidad de lluvia
        80: "‚õàÔ∏è",  # Muy alta probabilidad de lluvia o tormenta
        100: "‚ö°"   # Tormenta con truenos
    }

    # A√±adir anotaciones con emoticonos seg√∫n el nivel de probabilidad
    for level, emoji in emoji_levels.items():
        fig.add_annotation(
            xref="paper", yref="y",
            x=1.05, y=level,  # Ajustar posici√≥n de los emojis al lado derecho
            text=emoji,
            showarrow=False,
            font=dict(size=14)
        )

    # Configurar dise√±o del gr√°fico
    fig.update_layout(
        yaxis_title="Probabilidad de Precipitaci√≥n (%)",
        xaxis_title="Fecha y Hora",
        margin=dict(r=100)  # Espacio adicional para las anotaciones
    )

    # Mostrar el gr√°fico en la aplicaci√≥n Streamlit
    st.plotly_chart(fig)


def plot_storm_chance(data):
    """Genera un gr√°fico de probabilidad de tormenta por fecha y hora con anotaciones de emoticonos."""
    # Preparar los datos para el gr√°fico
    fig = px.line(data,
                  x='fecha_hora',
                  y='storm_probability',
                  labels={'precipitation_value': 'Probabilidad (%)'},
                  markers=True)

    # Definir los niveles de probabilidad de tormenta con emoticonos correspondientes
    emoji_levels = {
        0: "‚òÄÔ∏è",  # Soleado, sin tormenta
        20: "üå§Ô∏è",  # Baja probabilidad de tormenta
        40: "‚õàÔ∏è",  # Probabilidad moderada de tormenta
        60: "üå©Ô∏è",  # Alta probabilidad de tormenta
        80: "‚ö°",   # Muy alta probabilidad de tormenta
        100: "üå™Ô∏è"  # Tormenta severa
    }

    # A√±adir anotaciones con emoticonos seg√∫n el nivel de probabilidad
    for level, emoji in emoji_levels.items():
        fig.add_annotation(
            xref="paper", yref="y",
            x=1.05, y=level,  # Ajustar posici√≥n de los emojis al lado derecho
            text=emoji,
            showarrow=False,
            font=dict(size=14)
        )

    # Configurar dise√±o del gr√°fico
    fig.update_layout(
        yaxis_title="Probabilidad de Tormenta (%)",
        xaxis_title="Fecha y Hora",
        margin=dict(r=100)  # Espacio adicional para las anotaciones
    )

    # Mostrar el gr√°fico en la aplicaci√≥n Streamlit
    st.plotly_chart(fig)


def plot_weather_conditions(data):
    """Genera un gr√°fico de condiciones del cielo por fecha y hora."""
    # Crear una figura de Plotly
    fig = go.Figure()

    # A√±adir las barras para cada descripci√≥n del cielo
    for description in data['sky_description'].unique():
        filtered_data = data[data['sky_description'] == description]
        fig.add_trace(go.Bar(
            x=filtered_data['fecha_hora'],
            y=filtered_data['sky_value'],
            name=description,
        ))
    
    # Actualizar el dise√±o de la figura
    fig.update_layout(
        #title='Frecuencia de Condiciones del Cielo por Fecha y Hora',
        xaxis_title='Fecha y Hora',
        yaxis_title='Puntuaci√≥n del Cielo',
        barmode='group'  # Puedes cambiar a 'overlay' si deseas
    )

    st.plotly_chart(fig)  # Mostrar el gr√°fico en la aplicaci√≥n Streamlit

def plot_wind_data(data):
    """Genera un gr√°fico de velocidad del viento por fecha y hora con anotaciones de emoticonos."""
    # Crear el gr√°fico principal de l√≠neas para la velocidad del viento
    fig = px.line(data,
                  x='fecha_hora',
                  y='wind_speed',
                  labels={'wind_speed': 'Velocidad del Viento (km/h)'},
                  markers=True)

    # Definir los niveles de velocidad del viento con emoticonos correspondientes
    emoji_levels = {
        0: "üçÉ",    # Brisa suave
        5: "üå¨Ô∏è",  # Viento moderado
        10: "üí®",   # Viento fuerte
        15: "üå™Ô∏è",  # Viento muy fuerte
    }

    # A√±adir anotaciones con emoticonos seg√∫n el nivel de velocidad del viento
    for level, emoji in emoji_levels.items():
        fig.add_annotation(
            xref="paper", yref="y",
            x=1.05, y=level,  # Posici√≥n al lado derecho del gr√°fico
            text=emoji,
            showarrow=False,
            font=dict(size=14)
        )

    # Configuraci√≥n del dise√±o del gr√°fico
    fig.update_layout(
        yaxis_title="Velocidad del Viento (km/h)",
        xaxis_title="Fecha y Hora",
        margin=dict(r=100)  # Espacio adicional para las anotaciones
    )

    # Mostrar el gr√°fico en la aplicaci√≥n Streamlit
    st.plotly_chart(fig)
